import os from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update from telegram.ext import (ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes)

TOKEN = os.getenv("TELEGRAM_TOKEN")

–Ø–∑—ã–∫–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã

LANG = { 'ru': { 'start': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", 'menu': "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 'rooms': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:", 'cottages': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ç—Ç–µ–¥–∂–∞:", 'standard_rooms': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:", 'topchans': "–¢–æ–ø—á–∞–Ω—ã: —É –≤–æ–¥—ã, –≤ —Ç–µ–Ω–∏, —Å –Ω–∞–≤–µ—Å–æ–º.", 'menu_info': "üçΩ –ú–µ–Ω—é –∫—É—Ö–Ω–∏: –ó–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω. –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.", 'contacts': "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª: +998 99 444 99 59\nTelegram: @breeze_admin\n–û–ø–ª–∞—Ç–∞: Click, Payme, –Ω–∞–ª–∏—á–Ω—ã–º–∏" }, 'uz': { 'start': "Iltimos, tilni tanlang:", 'menu': "Asosiy menyu:", 'rooms': "Joylashtirish turini tanlang:", 'cottages': "Kottej turini tanlang:", 'standard_rooms': "Standart xona turini tanlang:", 'topchans': "Topchanlar: suv bo‚Äòyida, soyada, naves bilan.", 'menu_info': "üçΩ Oshxona menyusi: Nonushta, tushlik, kechki ovqat. Tabiiy mahsulotlar.", 'contacts': "üìû Kontaktlar:\nTel: +998 99 444 99 59\nTelegram: @breeze_admin\nTo‚Äòlov: Click, Payme, naqd" } }

user_language = {}

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

def main_menu(lang): return InlineKeyboardMarkup([ [InlineKeyboardButton("üè† –†–∞–∑–º–µ—â–µ–Ω–∏–µ" if lang == 'ru' else "üè† Joylashtirish", callback_data='rooms')], [InlineKeyboardButton("üçΩ –ú–µ–Ω—é –∫—É—Ö–Ω–∏" if lang == 'ru' else "üçΩ Oshxona menyusi", callback_data='menu')], [InlineKeyboardButton("üíµ –ö–æ–Ω—Ç–∞–∫—Ç—ã/–û–ø–ª–∞—Ç–∞" if lang == 'ru' else "üíµ Kontaktlar / To‚Äòlov", callback_data='contacts')] ])

–ö–æ–º–∞–Ω–¥–∞ /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): keyboard = [[ InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru'), InlineKeyboardButton("üá∫üáø O‚Äòzbekcha", callback_data='lang_uz') ]] await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:", reply_markup=InlineKeyboardMarkup(keyboard))

–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query await query.answer()

user_id = query.from_user.id
data = query.data

if data.startswith('lang_'):
    lang = data.split('_')[1]
    user_language[user_id] = lang
    await query.edit_message_text(text=LANG[lang]['menu'], reply_markup=main_menu(lang))

elif data == 'rooms':
    lang = user_language.get(user_id, 'ru')
    keyboard = [[
        InlineKeyboardButton("üè° –ö–æ—Ç—Ç–µ–¥–∂–∏" if lang == 'ru' else "üè° Kottejlar", callback_data='cottages')],
        [InlineKeyboardButton("üö™ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞" if lang == 'ru' else "üö™ Standart xonalar", callback_data='standard_rooms')],
        [InlineKeyboardButton("üõè –¢–æ–ø—á–∞–Ω—ã" if lang == 'ru' else "üõè Topchanlar", callback_data='topchans')]
    ]
    await query.edit_message_text(LANG[lang]['rooms'], reply_markup=InlineKeyboardMarkup(keyboard))

elif data in ['cottages', 'standard_rooms']:
    lang = user_language.get(user_id, 'ru')
    prefix = "–ö–æ—Ç—Ç–µ–¥–∂–∏" if data == 'cottages' else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞"
    uz_prefix = "Kottejlar" if data == 'cottages' else "Standart xonalar"
    keyboard = [[
        InlineKeyboardButton("2-–º–µ—Å—Ç–Ω—ã–µ" if lang == 'ru' else "2 o‚Äòrinli", callback_data=f'{data}_2')],
        [InlineKeyboardButton("4-–º–µ—Å—Ç–Ω—ã–µ" if lang == 'ru' else "4 o‚Äòrinli", callback_data=f'{data}_4')],
        [InlineKeyboardButton("5-–º–µ—Å—Ç–Ω—ã–µ" if lang == 'ru' else "5 o‚Äòrinli", callback_data=f'{data}_5')]
    ]
    await query.edit_message_text((prefix if lang == 'ru' else uz_prefix), reply_markup=InlineKeyboardMarkup(keyboard))

elif data == 'topchans':
    lang = user_language.get(user_id, 'ru')
    await query.edit_message_text(LANG[lang]['topchans'])

elif data == 'menu':
    lang = user_language.get(user_id, 'ru')
    await query.edit_message_text(LANG[lang]['menu_info'])

elif data == 'contacts':
    lang = user_language.get(user_id, 'ru')
    await query.edit_message_text(LANG[lang]['contacts'])

async def main(): app = ApplicationBuilder().token(TOKEN).build() app.add_handler(CommandHandler("start", start)) app.add_handler(CallbackQueryHandler(callback_handler)) await app.run_polling()

if name == 'main': import asyncio asyncio.run(main())

