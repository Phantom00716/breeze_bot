import os
from dotenv import load_dotenv
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –¢–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "accommodation": "–†–∞–∑–º–µ—â–µ–Ω–∏–µ",
        "menu": "–ú–µ–Ω—é",
        "contacts": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "cottages": "–ö–æ—Ç—Ç–µ–¥–∂–∏",
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞",
        "topchan": "–¢–æ–ø—á–∞–Ω—ã",
        "back": "–ù–∞–∑–∞–¥"
    },
    "uz": {
        "main_menu": "Asosiy menyu",
        "accommodation": "Yotoq joylar",
        "menu": "Taomlar menyusi",
        "contacts": "Kontaktlar",
        "cottages": "Kottejlar",
        "standard": "Oddiy xonalar",
        "topchan": "Topchanlar",
        "back": "Orqaga"
    }
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O‚Äòzbek", callback_data="lang_uz")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞
async def language_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data.split("_")[1]
    context.user_data["lang"] = lang
    await location_menu_handler(update, context)

# –ú–µ–Ω—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
async def location_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "ru")
    txt = TEXTS[lang]
    keyboard = [
        [InlineKeyboardButton(txt["cottages"], callback_data="cottages")],
        [InlineKeyboardButton(txt["standard"], callback_data="standard")],
        [InlineKeyboardButton(txt["topchan"], callback_data="topchan")],
        [InlineKeyboardButton(txt["back"], callback_data=f"lang_{lang}")]
    ]
    await query.edit_message_text("üè° " + txt["accommodation"], reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –ø—É–Ω–∫—Ç–æ–≤
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    lang = context.user_data.get("lang", "ru")
    txt = TEXTS[lang]

    if query.data == "accommodation":
        await location_menu_handler(update, context)
    elif query.data == "menu":
        await query.edit_message_text("üì∑ –§–æ—Ç–æ –º–µ–Ω—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ.")
    elif query.data == "contacts":
        await query.edit_message_text("üìû +998 XX XXX-XX-XX\\nüìç –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–µ –º–æ—Ä–µ, –∑–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ ¬´–ë—Ä–∏–∑¬ª")
    elif query.data in ["cottages", "standard", "topchan"]:
        await query.edit_message_text("üì∑ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ñ–æ—Ç–æ.")
    elif query.data.startswith("lang_"):
        await language_handler(update, context)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(language_handler, pattern="^lang_"))
application.add_handler(CallbackQueryHandler(location_menu_handler, pattern="^(cottages|standard|topchan|lang_)$"))
application.add_handler(CallbackQueryHandler(menu_handler))

if __name__ == "__main__":
    application.run_polling()
